# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# IPython Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# dotenv
.env

# virtualenv
venv/
ENV/

# Spyder project settings
.spyderproject

# Rope project settings
.ropeproject

def clear_screen():
    # Clear the screen by printing a bunch of empty lines
    for line in range(50):
        print()
def clear_text():
	clear_screen()
	print('\t',t_row[0],'\t|','\t',t_row[1],'\t|','\t', t_row[2],'\n',47 * '-','\n','\t',m_row[0],'\t|','\t',m_row[1],'\t|','\t', m_row[2],'\n',47 * '-','\n','\t',b_row[0],'\t|','\t',b_row[1],'\t|','\t', b_row[2],5*'\n')

def check_tic_tac_toe(board):
	for x in board:
		if board.index(x) not in [0,1,2]:
			raise ValueError

		for y in board[board.index(x)]:
			if board[board.index(x)].index(y) not in [0,1,2]:
				raise ValueError
		if y not in ['X','O',' ']:
				raise ValueError

	if board[0][0] in ['X','O'] and board[0][0] == board[1][0]:
		if board[1][0] == board[2][0]:
			return(board[0][0] + ' won')
	if board[0][0] in ['X','O'] and board[0][0] == board[0][1] :
		if board[0][1] == board[0][2]:
			return(board[0][0] + ' won')
	if board[1][0] in ['X','O'] and board[1][0] == board[1][1] :
		if board[1][1] == board[1][2]:
			return(board[1][0] + ' won')
	if board[2][0] in ['X','O'] and board[2][0] == board[2][1] :
		if board[2][1] == board[2][2]:
			return(board[2][0] + ' won')

	if board[0][1] in ['X','O'] and board[0][1] == board[1][1]:
		if board[1][1] == board[2][1]:
			return(board[1][1] + ' won')
	if board[0][2] in ['X','O'] and board[0][2] == board[1][2]:
		if board[1][2] == board[2][2]:
			return(board[1][2] + ' won')
	if board[0][2] in ['X','O'] and board[0][2] == board[1][1] :
		if board[1][1] == board[2][0]:
			return(board[1][1] + ' won')
	if board[0][0] in ['X','O'] and board[0][0] == board[1][1]:
		if board[1][1] == board[2][2]:
			return(board[1][1] + ' won')
	if ' ' not in board[0]:
		if ' ' not in board[1]:
			if ' ' not in board[2]:
				return('nobody won')
	return('game started')




t_row = [' ',' ',' ']
m_row = [' ',' ',' ']
b_row = [' ',' ',' ']
game = [t_row,m_row,b_row]
print('Shall we play a game?')
input('(Press any key to start)')
clear_text()


while check_tic_tac_toe(game) == 'game started':
	X_row = ' '
	X_column = ' '
	O_row = ' '
	O_column = ' '
	while X_row not in ['1', '2', '3']:
		X_row = input('Player One place your X, What Row? 1, 2, or 3\n')
		if X_row not in ['1', '2', '3']:
				print('That was not a valid choice')
				X_row = ' '
		if X_row == '1' and ' ' not in t_row:
			print('That row is full, choose another row.')
			X_row = ' '
		elif X_row == '2' and ' ' not in m_row:
			print('That row is full, choose another row.')
			X_row = ' '
		elif X_row == '3' and ' ' not in b_row:
			print('That row is full, choose another.')
			X_row = ' '



		while X_column not in ['1', '2', '3'] and X_row in ['1', '2', '3']:
			X_column = input('What Column? 1, 2, or 3\n')
			if X_column not in ['1', '2', '3']:
					print('That was not a valid choice')
					X_column = ' '
			if X_row== '1':
				if X_column =='1':
					if t_row[0] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='2':
					if t_row[1] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='3':
					if t_row[2] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '

						X_row = ' '
			elif X_row== '2':
				if X_column =='1':
					if m_row[0] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='2':
					if m_row[1] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='3':
					if m_row[2] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

			elif X_row== '3':
				if X_column =='1':
					if b_row[0] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='2':
					if b_row[1] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '

				elif X_column =='3':
					if b_row[2] != ' ':
						print('That spot is taken, choose another.')
						X_column = ' '
						X_row = ' '




	if X_row == '1':
		if X_column == '1':
			if t_row[0] == ' ':
				t_row[0] = 'X'



		elif X_column == '2':
			if t_row[1] == ' ':
				t_row[1] = 'X'
		elif X_column == '3':
			if t_row[2] == ' ':
				t_row[2] = 'X'
	elif X_row == '2':
		if X_column == '1':
			if m_row[0] == ' ':
				m_row[0] = 'X'
		elif X_column == '2':
			if m_row[1] == ' ':
				m_row[1] = 'X'
		elif X_column == '3':
			if m_row[2] == ' ':
				m_row[2] = 'X'
	elif X_row == '3':
		if X_column == '1':
			if b_row[0] == ' ':
				b_row[0] = 'X'
		elif X_column == '2':
			if b_row[1] == ' ':
				b_row[1] = 'X'
		elif X_column == '3':
			if b_row[2] == ' ':
				b_row[2] = 'X'


	if check_tic_tac_toe(game) != 'game started':
		clear_text()
		print(check_tic_tac_toe(game))
		ans = (input('Would you like to play again? Y/N\n').upper())
		if ans == 'Y':
			t_row = [' ',' ',' ']
			m_row = [' ',' ',' ']
			b_row = [' ',' ',' ']
			game = [t_row,m_row,b_row]
			clear_text()
		elif ans == 'N':
			break

	clear_text()


	while O_row not in ['1', '2', '3']:
		O_row = ' '

		O_row = input('Player Two place your O, What Row? 1, 2, or 3\n')
		if O_row not in ['1', '2', '3']:
				print('That was not a valid choice')
				O_row = ' '
		if O_row == '1' and ' ' not in t_row:
			print('That row is full, choose another row.')
			O_row = ' '
		elif O_row == '2' and ' ' not in m_row:
			print('That row is full, choose another row.')
			O_row = ' '
		elif O_row == '3' and ' ' not in b_row:
			print('That row is full, choose another.')
			O_row = ' '

		while O_column not in ['1', '2', '3'] and O_row in ['1', '2', '3']:
			O_column = input('What Column? 1, 2, or 3\n')
			if O_column not in ['1', '2', '3']:
					print('That was not a valid choice')
					O_column = ' '
			if O_row== '1':
				if O_column =='1':
					if t_row[0] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='2':
					if t_row[1] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='3':
					if t_row[2] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '
			elif O_row== '2':
				if O_column =='1':
					if m_row[0] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='2':
					if m_row[1] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='3':
					if m_row[2] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '

						O_row = ' '
			elif O_row== '3':
				if O_column =='1':
					if b_row[0] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='2':
					if b_row[1] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '

				elif O_column =='3':
					if b_row[2] != ' ':
						print('That spot is taken, choose another.')
						O_column = ' '
						O_row = ' '


	if O_row == '1':
		if O_column == '1':
			if t_row[0] == ' ':
				t_row[0] = 'O'
		elif O_column == '2':
			if t_row[1] == ' ':
				t_row[1] = 'O'
		elif O_column == '3':
			if t_row[2] == ' ':
				t_row[2] = 'O'
	elif O_row == '2':
		if O_column == '1':
			if m_row[0] == ' ':
				m_row[0] = 'O'
		elif O_column == '2':
			if m_row[1] == ' ':
				m_row[1] = 'O'
		elif O_column == '3':
			if m_row[2] == ' ':
				m_row[2] = 'O'
	elif O_row == '3':
		if O_column == '1':
			if b_row[0] == ' ':
				b_row[0] = 'O'
		elif O_column == '2':
			if b_row[1] == ' ':
				b_row[1] = 'O'
		elif O_column == '3':
			if b_row[2] == ' ':
				b_row[2] = 'O'

	clear_text()

	if check_tic_tac_toe(game) != 'game started':
		print(check_tic_tac_toe(game))
		ans = (input('Would you like to play again? Y/N\n').upper())
		if ans == 'Y':
			t_row = [' ',' ',' ']
			m_row = [' ',' ',' ']
			b_row = [' ',' ',' ']
			game = [t_row,m_row,b_row]
			clear_text()


clear_screen()

print('Game Over'.center(47,' '))
print(15 * '\n')
